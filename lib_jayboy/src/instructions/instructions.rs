use crate::errors::JayBoyError;
use crate::{CpuFlags, GByte, Instruction};
use anyhow::anyhow;

pub struct Instructions;
impl Instructions {
    pub const STD: [Instruction; 256] = [
        // 0x00
        Instruction {
            byte: 0x00,
            mnemonic: "NOP",
            byte_count: 1,
            clock_cycles: 1,
            flags: CpuFlags::NONE,
            description: "No Operation -- Does nothing",
        },
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        // 0xC3
        Instruction {
            byte: 0xC3,
            mnemonic: "JP a16",
            byte_count: 3,
            clock_cycles: 4,
            flags: CpuFlags::NONE,
            description: "Load the u16 operand into the Program Counter, which will be the subsequently executed instruction",
        },
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
        Instruction::NONE,
    ];

    pub fn get_standard(byte: u8) -> Result<Instruction, JayBoyError> {
        let instruction = Self::STD[byte as usize];
        if instruction == Instruction::NONE {
            Err(JayBoyError::Misc(anyhow!(
                "Invalid Standard Instruction: {}",
                GByte::from(byte)
            )))
        } else {
            Ok(instruction)
        }
    }
    pub fn get_prefixed(byte: u8) -> Result<Instruction, JayBoyError> {
        unimplemented!()
    }

    pub fn is_prefix(byte: u8) -> bool {
        byte == 0xCB
    }
}
